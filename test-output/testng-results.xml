<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="2" passed="2" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-12-27T14:12:18 IST" name="Suite" finished-at="2024-12-27T14:14:40 IST" duration-ms="142029">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:LearningTreeRunner.SISprovisioningRunner@4b520ea8]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test started-at="2024-12-27T14:12:18 IST" name="Test" finished-at="2024-12-27T14:14:40 IST" duration-ms="142029">
      <class name="LearningTreeRunner.SISprovisioningRunner">
        <test-method is-config="true" signature="setUpClass(org.testng.ITestContext)[pri:0, instance:LearningTreeRunner.SISprovisioningRunner@4b520ea8]" started-at="2024-12-27T14:12:18 IST" name="setUpClass" finished-at="2024-12-27T14:12:19 IST" duration-ms="797" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@52e5ad71]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:LearningTreeRunner.SISprovisioningRunner@4b520ea8]" started-at="2024-12-27T14:12:19 IST" name="beforeClass" finished-at="2024-12-27T14:12:19 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:LearningTreeRunner.SISprovisioningRunner@4b520ea8]" started-at="2024-12-27T14:12:19 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2024-12-27T14:13:09 IST" duration-ms="50198" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking the School, Classroom, Section Creation Functionality With valid Data"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Verify the SIS Provisioning Creation Functionality"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:LearningTreeRunner.SISprovisioningRunner@4b520ea8]" started-at="2024-12-27T14:13:09 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2024-12-27T14:14:36 IST" duration-ms="87538" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify the Users Creation Functionality with valid Data"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Verify the SIS Provisioning Creation Functionality"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:LearningTreeRunner.SISprovisioningRunner@4b520ea8]" started-at="2024-12-27T14:14:36 IST" name="afterClass" finished-at="2024-12-27T14:14:36 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="tearDownClass()[pri:0, instance:LearningTreeRunner.SISprovisioningRunner@4b520ea8]" started-at="2024-12-27T14:14:36 IST" name="tearDownClass" finished-at="2024-12-27T14:14:40 IST" duration-ms="3448" status="FAIL">
          <exception class="java.lang.AbstractMethodError">
            <message>
              <![CDATA[Receiver class org.apache.poi.xssf.usermodel.XSSFColor does not define or inherit an implementation of the resolved method 'abstract byte[] getStoredRGB()' of abstract class org.apache.poi.ss.usermodel.ExtendedColor.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AbstractMethodError: Receiver class org.apache.poi.xssf.usermodel.XSSFColor does not define or inherit an implementation of the resolved method 'abstract byte[] getStoredRGB()' of abstract class org.apache.poi.ss.usermodel.ExtendedColor.
at org.apache.poi.ss.usermodel.ExtendedColor.getRGBOrARGB(ExtendedColor.java:100)
at org.apache.poi.xssf.usermodel.XSSFColor.getRGB(XSSFColor.java:189)
at org.apache.poi.xssf.usermodel.XSSFFont.setColor(XSSFFont.java:421)
at tech.grasshopper.excel.report.cell.CellStyles.lambda$passTextBoldCellStyle$24(CellStyles.java:171)
at tech.grasshopper.excel.report.cell.CellStyles.setFont(CellStyles.java:212)
at tech.grasshopper.excel.report.cell.CellStyles.lambda$passTextBoldCellStyle$25(CellStyles.java:170)
at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1228)
at tech.grasshopper.excel.report.cell.CellStyles.passTextBoldCellStyle(CellStyles.java:170)
at tech.grasshopper.excel.report.cell.CellStyles.getCellStyle(CellStyles.java:87)
at tech.grasshopper.excel.report.cell.CellOperations.writeValue(CellOperations.java:65)
at tech.grasshopper.excel.report.table.SimpleTableOperations.writeTableCellValues(SimpleTableOperations.java:38)
at tech.grasshopper.excel.report.sheets.scenarios.ScenariosSheet.updateScenariosTableData(ScenariosSheet.java:100)
at tech.grasshopper.excel.report.sheets.scenarios.ScenariosSheet.updateSheet(ScenariosSheet.java:48)
at tech.grasshopper.excel.report.workbook.ReportWorkbook.updateSheets(ReportWorkbook.java:74)
at tech.grasshopper.excel.report.workbook.ExecutionDataReport.updateSheets(ExecutionDataReport.java:20)
at tech.grasshopper.excel.report.workbook.ReportWorkbook.createReport(ReportWorkbook.java:46)
at tech.grasshopper.reporter.ExtentExcelCucumberReporter.flush(ExtentExcelCucumberReporter.java:70)
at tech.grasshopper.reporter.ExtentExcelCucumberReporter.access$100(ExtentExcelCucumberReporter.java:18)
at tech.grasshopper.reporter.ExtentExcelCucumberReporter$1.onNext(ExtentExcelCucumberReporter.java:45)
at tech.grasshopper.reporter.ExtentExcelCucumberReporter$1.onNext(ExtentExcelCucumberReporter.java:37)
at io.reactivex.rxjava3.subjects.PublishSubject$PublishDisposable.onNext(PublishSubject.java:310)
at io.reactivex.rxjava3.subjects.PublishSubject.onNext(PublishSubject.java:226)
at com.aventstack.extentreports.ReactiveSubject.onFlush(ReactiveSubject.java:83)
at com.aventstack.extentreports.AbstractProcessor.onFlush(AbstractProcessor.java:96)
at com.aventstack.extentreports.ExtentReports.flush(ExtentReports.java:279)
at com.aventstack.extentreports.service.ExtentService.flush(ExtentService.java:47)
at com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter.finishReport(ExtentCucumberAdapter.java:301)
at com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter$8.receive(ExtentCucumberAdapter.java:137)
at com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter$8.receive(ExtentCucumberAdapter.java:134)
at io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)
at io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)
at io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)
at io.cucumber.core.runtime.CucumberExecutionContext.emitTestRunFinished(CucumberExecutionContext.java:118)
at io.cucumber.core.runtime.CucumberExecutionContext.finishTestRun(CucumberExecutionContext.java:105)
at io.cucumber.testng.TestNGCucumberRunner.finish(TestNGCucumberRunner.java:145)
at io.cucumber.testng.AbstractTestNGCucumberTests.tearDownClass(AbstractTestNGCucumberTests.java:57)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:222)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:131)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AbstractMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- LearningTreeRunner.SISprovisioningRunner -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
